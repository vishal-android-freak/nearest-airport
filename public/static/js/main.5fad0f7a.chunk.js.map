{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSelect","address","geocodeByAddress","then","results","setState","formatted_address","id","place_id","address_components","forEach","types","database","ref","set","shortName","short_name","value","console","log","catch","error","getLatLng","latLng","zoom","isAddressSelected","findNearest","event","state","preventDefault","loading","fetch","method","mode","headers","Content-Type","body","JSON","stringify","location","latitude","Number","cityLat","longitude","cityLong","res","json","data","airports","markers","marker","setMap","length","airport","push","mainMap","Marker","title","nameAirport","map","position","lat","lng","animation","Animation","DROP","showSnack","_this2","_this$state","setPosition","react_default","a","createElement","className","snackbar","show","onHide","evt","message","timeout","dismissesOnAction","typography","use","card","dist_default","onChange","_ref","getInputProps","suggestions","getSuggestionItemProps","textfield","assign","outlined","placeholder","suggestion","active","style","backgroundColor","cursor","description","target","label","marginLeft","_rmwc_button","disabled","onClick","raised","circular_progress","size","codeIataCity","codeIataAirport","codeIcaoAirport","concat","distance","lib_default","bootstrapURLKeys","key","resetBoundsOnResize","defaultCenter","defaultZoom","center","onGoogleApiLoaded","_ref2","maps","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5fad0f7a.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyCh_v8Ug7VwpJGJBrZyMJqnO8pbyp9RAY4\",\n    authDomain: \"airports-222008.firebaseapp.com\",\n    databaseURL: \"https://airports-222008.firebaseio.com\",\n    projectId: \"airports-222008\",\n    storageBucket: \"airports-222008.appspot.com\",\n    messagingSenderId: \"522583867627\"\n};\n\nconst app = firebase.initializeApp(config);\nexport default app;","import React, {Component} from 'react';\nimport GoogleMap from 'google-map-react';\nimport {Typography} from '@rmwc/typography';\nimport {Card} from '@rmwc/card';\nimport {TextField} from '@rmwc/textfield';\nimport PlacesAutocomplete, {geocodeByAddress, getLatLng} from 'react-places-autocomplete';\nimport {Button} from '@rmwc/button';\nimport './App.css';\nimport firebase from './firebase';\nimport {CircularProgress} from '@rmwc/circular-progress';\nimport {Snackbar} from '@rmwc/snackbar';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            latLng: {lat: 0, lng: 0},\n            address: '',\n            zoom: 5,\n            cityLat: '',\n            cityLong: '',\n            airports: [],\n            loading: false,\n            isAddressSelected: false,\n            showSnack: false\n        }\n        this.markers = [];\n    }\n\n    onSelect = (address) => {\n        geocodeByAddress(address)\n            .then(results => {\n                this.setState({\n                    address: results[0].formatted_address\n                });\n                this.id = results[0].place_id;\n                const addresses = results[0].address_components;\n                addresses.forEach(address => {\n                    if (address.types[0] === 'country') {\n                        firebase.database().ref(this.id).set({shortName: address.short_name})\n                            .then(value => console.log(value))\n                            .catch(error => console.log(error));\n                    }\n                });\n                return getLatLng(results[0])\n            })\n            .then(latLng => this.setState({latLng, zoom: 5, isAddressSelected: true}))\n            .catch(error => console.log(error));\n    };\n\n    findNearest = (event) => {\n        if (this.state.isAddressSelected) {\n            event.preventDefault();\n            this.setState({loading: true});\n            fetch('https://us-central1-airports-222008.cloudfunctions.net/getNearestAirports', {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    id: this.id,\n                    location: {\n                        latitude: Number(this.state.cityLat),\n                        longitude: Number(this.state.cityLong)\n                    }\n                })\n            }).then(res => res.json())\n                .then(data => {\n                    this.setState({\n                        loading: false,\n                        airports: data, address: '',\n                        cityLat: '',\n                        cityLong: '',\n                        isAddressSelected: false\n                    });\n                    this.markers.forEach(marker => {\n                        marker.setMap(null);\n                    });\n                    this.markers.length = 0;\n                    data.forEach(airport => {\n                        this.markers.push(new this.mainMap.Marker({\n                            title: airport.nameAirport,\n                            map: this.map,\n                            position: {lat: airport.latitude, lng: airport.longitude},\n                            animation: this.mainMap.Animation.DROP\n                        }));\n                    })\n                })\n                .catch(error => {\n                    this.setState({\n                        loading: false,\n                        address: '',\n                        cityLat: '',\n                        cityLong: '',\n                        isAddressSelected: false\n                    });\n                });\n        } else {\n            this.setState({\n                showSnack: true\n            });\n        }\n    };\n\n    render() {\n        const {cityLat, cityLong} = this.state;\n        if (cityLat !== '' && cityLong !== '') {\n            this.marker.setPosition({lat: Number(cityLat), lng: Number(cityLong)});\n        }\n        return (\n            <div className={'app-container'}>\n                <Snackbar\n                    show={this.state.showSnack}\n                    onHide={evt => this.setState({showSnack: false})}\n                    message=\"Select the country from the list\"\n                    timeout={3000}\n                    dismissesOnAction={false}\n                />\n                <div className={'input-container'}>\n                    <Typography className={'title'} use={'headline4'}>Nearest Airports</Typography>\n                    <Card className={'input-card'}>\n                        <div>\n                            <PlacesAutocomplete\n                                value={this.state.address}\n                                onChange={(address) => this.setState({address})}\n                                onSelect={this.onSelect}>\n                                {({getInputProps, suggestions, getSuggestionItemProps, loading}) => (\n                                    <div>\n                                        <TextField\n                                            outlined\n                                            {...getInputProps({\n                                                placeholder: 'Enter Country Name',\n                                                className: 'location-search-input',\n                                            })}\n                                        />\n                                        <div className=\"autocomplete-dropdown-container\">\n                                            {loading && <div>Loading...</div>}\n                                            {suggestions.map(suggestion => {\n                                                const className = suggestion.active\n                                                    ? 'suggestion-item--active'\n                                                    : 'suggestion-item';\n                                                // inline style for demonstration purpose\n                                                const style = suggestion.active\n                                                    ? {backgroundColor: '#fafafa', cursor: 'pointer'}\n                                                    : {backgroundColor: '#ffffff', cursor: 'pointer'};\n                                                return (\n                                                    <div\n                                                        {...getSuggestionItemProps(suggestion, {\n                                                            className,\n                                                            style,\n                                                        })}\n                                                    >\n                                                        <span>{suggestion.description}</span>\n                                                    </div>\n                                                );\n                                            })}\n                                        </div>\n                                    </div>\n                                )}\n                            </PlacesAutocomplete>\n                        </div>\n                        <div className={'lat-lng-input'}>\n                            <TextField value={this.state.cityLat}\n                                       onChange={(event) => this.setState({cityLat: event.target.value})} outlined\n                                       label={'Latitude of City'}/>\n                            <TextField value={this.state.cityLong}\n                                       onChange={(event) => this.setState({cityLong: event.target.value})}\n                                       style={{marginLeft: '5%'}} outlined label={'Longitude of City'}/>\n                            <Button disabled={this.state.loading} onClick={this.findNearest} style={{marginLeft: '5%'}}\n                                    raised>Find</Button>\n                        </div>\n                    </Card>\n                    <table>\n                        <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>City</th>\n                            <th>IATA</th>\n                            <th>ICAO</th>\n                            <th>Location</th>\n                            <th>Airport Distance</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {this.state.loading ? <CircularProgress size=\"large\"/> :\n                            this.state.airports.map(airport => {\n                                return <tr>\n                                    <td>{airport.nameAirport}</td>\n                                    <td>{airport.codeIataCity}</td>\n                                    <td>{airport.codeIataAirport}</td>\n                                    <td>{airport.codeIcaoAirport}</td>\n                                    <td>{`${airport.latitude}, ${airport.longitude}`}</td>\n                                    <td>{`${airport.distance / 1000} KM`}</td>\n                                </tr>\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n                <div className={'map-container'}>\n                    <GoogleMap\n                        bootstrapURLKeys={{\n                            key: 'AIzaSyA3WvtqcOacHZdoMkAieW_ly3IRAr7Vg8E'\n                        }}\n                        resetBoundsOnResize={true}\n                        defaultCenter={{lat: 0, lng: 0}}\n                        defaultZoom={5}\n                        zoom={this.state.zoom}\n                        center={this.state.latLng}\n                        onGoogleApiLoaded={({map, maps}) => {\n                            this.mainMap = maps;\n                            this.map = map;\n                            this.marker = new maps.Marker({\n                                title: 'Selected City',\n                                map: map,\n                                zoom: 2,\n                                animation: maps.Animation.DROP\n                            });\n                        }}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/material-components-web/dist/material-components-web.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}